// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ERC721/ERC721.sol";
import "./access/AccessControlEnumerable.sol";
import "./ERC721/extensions/ERC721Enumerable.sol";
import "./ERC721/extensions/ERC721Burnable.sol";
import "./ERC721/extensions/ERC721Pausable.sol";
import "./utils/Counters.sol";

/**
 * @dev Valorem Real Estate NFT
 * @author Burt Snyder / Open Zeppelin
 * Facilitate buying a percentage of real estate as an nft token.
 * - Tokens updated on appraisel
 * - ...
 */
contract VContract is
    Context,
    AccessControlEnumerable,
    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable
{
    using Counters for Counters.Counter;
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    string private _baseTokenURI;
    Counters.Counter private _tokenIdTracker;

    //last token minted
    uint256 private _tokenId;

    /**
     * @dev Property details update purchaseAmount on transfer
     */
    struct Property {
        string URI;
        uint256 currentValue;
        uint256 valueOnPurchase;
        uint256 purchasedAmount;
    }

    Property[] public properties;
    //map property to tokenId
    mapping(uint256 => uint256) public propertyToToken;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    ) ERC721(name, symbol) {
        _baseTokenURI = baseTokenURI;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    /**
     * @dev Checks mapping for property uri
     * that is established on mint. Returns property uri based
     * on token id.
     */
    function propertyURI(uint256 tokenId)
        public
        view
        virtual
        returns (string memory)
    {
        uint256 _id = propertyToToken[tokenId];
        return properties[_id].URI;
    }

    /**
     * @dev
     * returns the last id of minted token
     */
    function lastTokenMinted() public view returns (uint256) {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "VContract: must have minter role to get last token minted"
        );
        return _tokenId;
    }

    /**
     * @dev returns baseTokenUri
     */
    function getBaseTokenURI() external view returns (string memory) {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "VContract: must have minter role to get base token URI"
        );
        return _baseTokenURI;
    }

    /**
     * @dev update _baseTokenURI
     */
    function updateBaseTokenURI(string memory _uri) external {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "VContract: must have minter role to update base token URI"
        );
        _baseTokenURI = _uri;
    }

    /**
     * @dev private add new property uri to mapping set on mint
     */
    function _setPropertyOnMint(
        uint256 tokenId,
        string memory _uri,
        uint256 _currentValue
    ) internal {
        properties.push(Property(_uri, _currentValue, 0, 0));
        uint256 id = properties.length - 1;
        propertyToToken[tokenId] = id;
    }

    /**
     * @dev update property uri to mapping by minter
     */
    function updatePropertyURI(uint256 tokenId, string memory _uri) external {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "VContract: must have minter role to update property uri"
        );
        uint256 _id = propertyToToken[tokenId];
        Property storage _property = properties[_id];
        _property.URI = _uri;
        properties[_id] = _property;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     *
     * Extra:
     * - set last token minted: _tokenId
     * - set property uri address if you want or value to add to base
     */
    function mint(
        address to,
        string memory _propertyURI,
        uint256 _currentValue
    ) public virtual {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "VContract: must have minter role to mint"
        );
        _mint(to, _tokenIdTracker.current());
        _tokenId = _tokenIdTracker.current();

        if (bytes(_propertyURI).length < 1) {
            _propertyURI = string(abi.encodePacked(_tokenId));
        }
        _setPropertyOnMint(
            _tokenIdTracker.current(),
            _propertyURI,
            _currentValue
        );
        _tokenIdTracker.increment();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
